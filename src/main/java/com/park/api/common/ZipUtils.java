package com.park.api.common;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

public class ZipUtils {

/**

* 使用gzip进行压缩
*/
public static String gzip(String primStr) {
if (primStr == null || primStr.length() == 0) {
return primStr;
}

ByteArrayOutputStream out = new ByteArrayOutputStream();

GZIPOutputStream gzip=null;
try {
gzip = new GZIPOutputStream(out);
gzip.write(primStr.getBytes());
} catch (IOException e) {
e.printStackTrace();
}finally{
if(gzip!=null){
try {
gzip.close();
} catch (IOException e) {
e.printStackTrace();
}
}
}


return new sun.misc.BASE64Encoder().encode(out.toByteArray());
}

/**
*
* <p>Description:使用gzip进行解压缩</p>
* @param compressedStr
* @return
*/
public static String gunzip(String compressedStr){
if(compressedStr==null){
return null;
}

ByteArrayOutputStream out= new ByteArrayOutputStream();
ByteArrayInputStream in=null;
GZIPInputStream ginzip=null;
byte[] compressed=null;
String decompressed = null;
try {
compressed = new sun.misc.BASE64Decoder().decodeBuffer(compressedStr);
in=new ByteArrayInputStream(compressed);
ginzip=new GZIPInputStream(in);

byte[] buffer = new byte[1024];
int offset = -1;
while ((offset = ginzip.read(buffer)) != -1) {
out.write(buffer, 0, offset);
}
decompressed=out.toString();
} catch (IOException e) {
e.printStackTrace();
} finally {
if (ginzip != null) {
try {
ginzip.close();
} catch (IOException e) {
}
}
if (in != null) {
try {
in.close();
} catch (IOException e) {
}
}
if (out != null) {
try {
out.close();
} catch (IOException e) {
}
}
}

return decompressed;
}

/**
* 使用zip进行压缩
* @param str 压缩前的文本
* @return 返回压缩后的文本
*/
public static final String zip(String str) {
if (str == null)
return null;
byte[] compressed;
ByteArrayOutputStream out = null;
ZipOutputStream zout = null;
String compressedStr = null;
try {
out = new ByteArrayOutputStream();
zout = new ZipOutputStream(out);
zout.putNextEntry(new ZipEntry("0"));
zout.write(str.getBytes());
zout.closeEntry();
compressed = out.toByteArray();
compressedStr = new sun.misc.BASE64Encoder().encodeBuffer(compressed);
} catch (IOException e) {
compressed = null;
} finally {
if (zout != null) {
try {
zout.close();
} catch (IOException e) {
}
}
if (out != null) {
try {
out.close();
} catch (IOException e) {
}
}
}
return compressedStr;
}
	
	/**
	* 使用zip进行解压缩
	* @param compressed 压缩后的文本
	* @return 解压后的字符串
	*/
	public static final String unzip(String compressedStr) {
	if (compressedStr == null) {
	return null;
	}
	
	ByteArrayOutputStream out = null;
	ByteArrayInputStream in = null;
	ZipInputStream zin = null;
	String decompressed = null;
	try {
	byte[] compressed = new sun.misc.BASE64Decoder().decodeBuffer(compressedStr);
	out = new ByteArrayOutputStream();
	in = new ByteArrayInputStream(compressed);
	zin = new ZipInputStream(in);
	zin.getNextEntry();
	byte[] buffer = new byte[1024];
	int offset = -1;
	while ((offset = zin.read(buffer)) != -1) {
	out.write(buffer, 0, offset);
	}
	decompressed = out.toString();
	} catch (IOException e) {
	decompressed = null;
	} finally {
	if (zin != null) {
	try {
	zin.close();
	} catch (IOException e) {
	}
	}
	if (in != null) {
	try {
	in.close();
	} catch (IOException e) {
	}
	}
	if (out != null) {
	try {
	out.close();
	} catch (IOException e) {
	}
	}
	}
	return decompressed;
	}
	
	public static void main(String[] args) {
		String str = "+003-004+005+001+001-001+003+001+003-002+002-001-001+001+002-002+005-007-006+001,+002+001-001-001+001+003+002+001+001+001+001-002-004+003-004-002+001-001-001+001,-002-001-003-001-001+001+001+003-004+001+006+002-002+001+001-002+001+002-002-001,-003+001-002-001+001+001+001-001+004-002-001-003+002+004+003+003-003+001+001+001,+002-006-002+002-001-001-002-002+003+002-001+001+001-001-001-002-002-001+002+006,+002+001-001+001-001+001+002+001-001+001-001-003+003-001+002-003-005-002-003+006,-003-001-003-001-002-002-002+001-002+002-008+001-003-001+001-001-001-001+002+001,+001+001-001+001-003+010-002-004+005-001+001+001+002+001+001-001+001+001-001-001,-002-002-002-003+003-002-003-003+001+001-001-003-001-001-001+001-001+006-001+001,-001+001+001+001+002+001+001+003-003-002-003-001+001+005-001+001-001-001-003-008,-001-003+002-002-002+003-003+003-002-001-002+001-007+001+001+001+001-001+001+001,+003-001-001+002-001+001-003-001-001+002-003+001+003-002-001-002-003-009-004-005,-007-001-005+002+001+001+001+003-001-002-003-002+002+001+002+001-001+001-002-001,-001-001-005+003-001+001+001+001-003-003+001+001+001-001-001-003+001+001-001+003,-003+001-002-001-001+001-001-002-001-001-002+001+001-001+001+002+001+001+002+001,+002+001-001+001-001-004-001-002-004+002-001-001-001-002+002-001-003+004-001-003,-001+005+001+003-003-001+001-001-001+001+001+001-006-001-002-001+003-002-001-002,+001+001+003-006-002-002-001-002-001+001-001+004-003+003-002-001+002-002+005-001,-002-001+001-001-003+001+001+006+002-001+004-001-002+002+002-001+002+001-002-001,-003-005+004+001-003+002+002+002-002+002+002-001-001-001+001-001+004-001+002-001,+001+003+002+002+003-001-001-001+002-006-002-001+001+002-001+001+001-002-001-002,-001-002-003-001+001-003-001+001-001-001-001+002-005-001+002+003+001-001+005+001,+001-002+001-001+002-002+001-001+001-001-002-001+001+001-001-001-005-001-003+001,-001+003-002+001-001+001-002-003-001-001-001-001+001-002+001-001-002-003-003+001,+003-001-002+001-001-001-001-001-004-002-007-002+002-001-003+002+001+007+001+001,+001+002+001+001+001+002+001-002-002-001-004+001-003-008+010-004+001+010-001+001,-003+002+002+003-002-001+001-001-001-009+007+002-002-001+001-004+001-002+003+001,-001-002+009-001+001-005+001-001+001+002-001-001-002+002-003+001-002-001-001+001,+001+002+001-001+002-002+002+001-001-002+002+001-004-001+001-003-001+003-001-002,-003+001-001+002-001-001-001+001-001+002-002+002-004-003-001+001-002-002-001-004,-002+001-001-001-004+002-001-005+005+001+008+001-002-001-004+001-001+002-001-004,+006-001+003-001-002+002+001+003+002+002-001+003-001+002+001-001-002+001+003-002,-001-001-001-001+001-002+004-001-002-002+001+001-003+003+001+001-001-001-004+002,-001+002+001+002-001-001-001-001+002+002+002-002+002-002+001-003-001-002+005+006,+006+002-001-004-002-002-001-002+004-002-001+001-007-001+001+001-001+001+001-002,-002-001-008-003-003+001-001+004-003+002+001+001+001+001-002+003-002+002-001+002,-002+001+001+001-001-002-001+002+004-002+001-003-001+001-001-004+004-001-002-002,-001-001-001-003-001+005-003-002-002-001+001-001-002-001-002+001-002-002+002-001,+002-001-001-003-001+001-001-002+003+001-001-009+004-001+003-004-001+001-001+001,+002+001+001-001+001-001-004-001+004-001-001+001+001-001-002-004+003-002-002-001,+001-003+001-001-002+006+002+001-002-001+001+001+002+001+001+002+001-001+001+003,+002+002+001-001-004-001-002-001-001+002+001-003+001-001+007+001-002+001+005-007,-001+005-001+001+001-003+001+002+001+001-005+001-001-003-002+003+001+001-001+002,+001-004-004-001-001-001+003-002-002-001-002-001+001+001+001-001+001+002+001-002,+004-001+002+002-002-005+003-001-003+003+001+002-001+003-001-001+001+003+003+001,+001-001+001+001-001-005+004-001+003+004-001-002+001-003+004-005+001+001+002+002,+002+002+003-002-003+001-001+001+001-001-003+002-003-002+003-001+002-001+007-001,+001+002+001-003-002+001+002-001-001-002+001+001+002-001+002+001-001-001-001-005,-001+001-002+001-001-005-004+002-002-001-002+001-001-003-002-001-002-001-001-006,-001+002+003+001-001+001+001-001-001-002-004+001+001-001-001+005+001-001-001+003,+001-001-001+001+002-003-002-001+001-001-001+003+002+001+001+001+003+001-001+001,+001-002+005-002+001+004+001-002+001+001-001-001+001+001+002+004+002+001-003+002,+001-004-002-001-003+002+001-002+001-002-003+004+001+001-006+001+001-001+001-005,+002-001-001-001-002+002+001-002-001-002+002+001-001+004-001+001-001-002+003-002,-002-002+001-002+001+004+003+001-001+001+001+001+001+002+001+001+003+002+006+003,-001-001+009+001+003+001+001-002-001+001-002-001+002-002+001-001-002-001+002+001,-001+001-003-001+001-003+001-001+002-004-001-003-001-002-001+004-003-001+005-003,+008+001-001-002-003+002+001-001+002+001-001-001+003+003-001-003+001+003+001+003,+001-002-005-001+001-003+003-001-006-002-001+003+002-002-001+003-001+001-001+001,-007+001-002+001+002-001+001-001-001-001+004-001+003-001-005+005-001+004-001-001,+001-003+002+001-001+001-006-001-002+002+002-002+003-004-001-005+001+002+002-001,-001-001+001-001-001+001+001+003+001-001+004+008-001+001-002-008+001+001+001+004,-002-001-004-002-001-003-001-001+001+001-001+002+002-002+003+005-001-001+001+002,+005-004+001+003-001+002+004+002-001+002-001-002+002+002-003+001-003+004-002+001,+003+002-002-001-002+002+002+001+003-001-002+004+002-002+002+002+005+001-005-002,+002-001+003-003-002-001+001+001+002+002-002-001+007+001+002-001+001-002+002+002,-001-006+001-002+001+005-004-001+003+001+002-002+002-004-002+002+002-001-001+001,+003-001-002+004+005+003-001-002+004-003+001-001-007+006+001-001-002+001+001-002,+006-001+001-002-001-001+004+001-006-002+003+001+002+006-001+003+002-002-001-003,-002+004-001-001-004+001-001+004+001+002+002-001-001-002-002+001-001+001-001-001,-001+003-001-001+001-001-001+002-007-001-001-002-001-004+002+003-003+002-004-001,-005+001-003+001+004+001-001+004-001+001-002+001+002+002+004+002-001+003+001+001,-001-001-001+003-001+001-001-004+001-002-001+002-001-002-005+004-003+001+001+001,-002+001+002-003-003+001-001+002-001-002+005-001-001+002-001-003-001+001-001+004,-002+001+003-001-001+001+001+008+005+002-002-001-004+002+001-003-001-001-002+001,-001+001+006+002-001+004+001-001-001-001-004+001-003+004+003-001-002-001+003+002,-003-002+007-004-003-001-005+001-004-002+001-002-002+001+001-001+001+005-001+006,-001+001+002-001-002-003-003-001-001+002+001-001+001-001+004+005+002-001+002+002,-001+026+026-001-001+026-001+026+026-003-002+001-001+001-001-001+001+001+018-001,-003+002-005-001-001+001+003+002-004-001-001+002-002-002-001-002+001-001-002-002,+001-003-001-001-007+001+001-001-001-001-004-001+002-002+002-001+003-006+002+002,+001+001-002-001-001+001-002-001+001-001-003+003-001+002-002-002+001+003+008+003,-001-002+002+001-003+004+002+001-002-004+002+001+001+003-001-001-002-002-001+002,+003-001-003-004+003-001-002+001-002+001+004+001-002+002+001+002+002-002+001+001,-003-002-001+001+004+003-002-003+003-002+001+002-001-001-004+002-002-001+009-001,+003-001+001-002+001-005+001-001-004-002-001+004-001+002+001-006+001+002-001+004,+003+001-001-001-002-003+001+002+005-002-001-001+001+009+001-002+001-002+001+001,+002+001+003-001+005+001+001-001-001+001+002-001-002+001-001+001-003+005+001-003,+001-003-001-001-001-003+001+001+002-005-002+005+003+002-002+001-002+001-003+003,-001-001+001+001+001-001+001+003+001-002+001+001+001+001+001-001+001+001-001+001,-006-001+002-006-001-001-001-007-005+001-002-003+001-003+001+002-001-005+001-001,+002-001+001+001+003+001+002-001+003+001-002-002+002+001+001+001+001-001-001+004,-001+002-001+003-003-002+002-001+002-001-001-001+001-001+001+001-002-002-001+001,-002-002+003-001-001+001-003-003+001-001+002+001-003-001+001+006+002+001+001-003,+002+001-001-001-002-001+001-001+001+004-002+001+001-003-006-001+001-001+001+001,-001+002+002-003-001-001+002+001-001+003-001-001+002-002-001-001-001-001+002+001,+002+003+001-001+004+002-003+001+001-003-002+002+002-002+001+002+002+001+001-001,+003+001+001+005+001+003+002-002+001-002+003+002+002+001+003-004+002-003+001+002,-001-002-003-001-001-001+002-001+003-003-003+004-002-002-001+002-001+002-002+001,-001+001-002-002+002+001+003+002+002-003+006-001+003+003+003+002+002-001+001+004";
		
		String zipStr = gzip(str);
		System.out.println(str.length());
		System.out.println(zipStr.length());
		System.out.println(gunzip(zipStr));
		
	}
	}
